{"version":3,"sources":["../../src/Path.tsx","../../src/CircularProgressbar.tsx","../../src/constants.ts","../../src/CircularProgressbarWithChildren.tsx","../../src/buildStyles.ts","AnimatedProgressProvider.tsx","ChangingProgressProvider.tsx","ProgressProvider.tsx","Demo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","React.createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","React.Component","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","x","y","defaultProps","CircularProgressbarWithChildren","children","position","width","height","circularProgressbarProps","marginTop","display","flexDirection","justifyContent","alignItems","buildStyles","strokeLinecap","textColor","textSize","pathColor","pathTransition","pathTransitionDuration","trailColor","backgroundColor","rotationTransform","undefined","rotationTransformOrigin","removeUndefinedValues","stroke","transform","transformOrigin","transition","transitionDuration","fill","fontSize","obj","keys","forEach","key","AnimatedProgressProvider","state","isAnimated","setState","start","valueStart","update","valueEnd","timing","duration","ease","easingFunction","React","Component","ChangingProgressProvider","valuesIndex","setInterval","values","length","interval","ProgressProvider","timeout","window","setTimeout","clearTimeout","Code","classNames","Example","description","Demo","useState","showAllExamples","setShowAllExamples","easeQuadInOut","roundedValue","round","src","alt","Fragment","onClick","href","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qqBAGA,SAASA,EAAK,G,IACZC,EAAA,EAAAA,UACAC,EAAA,EAAAA,iBACAC,EAAA,EAAAA,UACAC,EAAA,EAAAA,WACAC,EAAA,EAAAA,YACAC,EAAA,EAAAA,MASA,OACEC,gCACEN,UAAWA,EACXK,MAAOE,OAAOC,OAAO,GAAIH,EAAOI,EAAa,CAAEN,WAAU,EAAED,UAAS,EAAED,iBAAgB,KACtFS,EAAGC,EAAmB,CACpBR,WAAU,EACVF,iBAAgB,IAElBG,YAAaA,EACbQ,YAAa,IAMnB,SAASD,EAAmB,G,IAC1BR,EAAA,EAAAA,WAOMU,EANN,EAAAZ,iBAMoC,EAAI,EAMxC,MAAO,+BAPQE,EASE,aATFA,EAUD,IAVCA,EAUS,IAAIU,EAAQ,UAAU,EAV/BV,EAUyC,aAVzCA,EAWD,IAXCA,EAWS,IAAIU,EAAQ,WAAW,EAXhCV,EAW0C,SAI3D,SAASM,EAAa,G,IACpBR,EAAA,EAAAA,iBACAC,EAAA,EAAAA,UACAC,EAAA,EAAAA,WAMMW,EAAqB,EAAVC,KAAKC,GAASb,EACzBc,GAAa,EAAIf,GAAaY,EAEpC,MAAO,CAELI,gBAAoBJ,EAAQ,MAAMA,EAAQ,KAE1CK,kBAAqBlB,GAAoBgB,EAAYA,GAAS,MC3DlE,+B,+CA8GA,O,2HA9GkCG,MA2BhC,YAAAC,qBAAA,WACE,OAAKC,KAAKC,MAAMC,WAITF,KAAKC,MAAME,kBAFT,GAKX,YAAAC,cAAA,WAGE,OChD+B,GDgDFJ,KAAKC,MAAMnB,YAAc,EAAIkB,KAAKD,wBAIjE,YAAAM,aAAA,WACQ,iBAAEC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,SAEzB,OADqBf,KAAKgB,IAAIhB,KAAKiB,IAAIJ,EAAOC,GAAWC,GAClCD,IAAaC,EAAWD,IAGjD,YAAAI,OAAA,WACQ,iBACJC,EAAA,EAAAA,YACAlC,EAAA,EAAAA,UACAmC,EAAA,EAAAA,QACAlC,EAAA,EAAAA,iBACAmC,EAAA,EAAAA,OACAhC,EAAA,EAAAA,YACAiC,EAAA,EAAAA,KAGIlC,EAAamB,KAAKI,gBAClBY,EAAYhB,KAAKK,eAEvB,OACErB,+BACEN,UAAcmC,EAAQI,KAAI,IAAIvC,EAC9BK,MAAO+B,EAAOG,KACdC,QAAS,cAAwC,eACpC,uBAEZlB,KAAKC,MAAMC,WACVlB,kCACEN,UAAWmC,EAAQX,WACnBnB,MAAO+B,EAAOZ,WACdiB,GClFoB,GDmFpBC,GClFoB,GDmFpBC,ECrFuB,KDuFvB,KAEJrC,wBAACP,EAAI,CACHC,UAAWmC,EAAQS,MACnB3C,iBAAkBA,EAClBC,UAAWgC,EACX/B,WAAYA,EACZC,YAAaA,EACbC,MAAO+B,EAAOQ,QAGhBtC,wBAACP,EAAI,CACHC,UAAWmC,EAAQU,KACnB5C,iBAAkBA,EAClBC,UAAWoC,EAAYJ,EACvB/B,WAAYA,EACZC,YAAaA,EACbC,MAAO+B,EAAOS,OAGfR,EACC/B,gCACEN,UAAWmC,EAAQE,KACnBhC,MAAO+B,EAAOC,KACdS,EC9GoB,GD+GpBC,EC9GoB,IDgHnBV,GAED,OAzGH,EAAAW,aAAgD,CACrDxB,YAAY,EACZC,kBAAmB,EACnBS,YAAa,EACbC,QAAS,CACPI,KAAM,sBACNK,MAAO,4BACPC,KAAM,2BACNR,KAAM,2BACNb,WAAY,kCAEdvB,kBAAkB,EAClBD,UAAW,GACX8B,SAAU,IACVD,SAAU,EACVzB,YAAa,EACbgC,OAAQ,CACNG,KAAM,GACNK,MAAO,GACPC,KAAM,GACNR,KAAM,GACNb,WAAY,IAEda,KAAM,IAsFV,EA9GA,CAAkCjB,aEDlC,SAAS6B,EAAgC1B,GAC/B,EAAA2B,SAAA,IAAU,E,sRAAA,iBAElB,OACE5C,8CAAkB,mCAGhBA,+BAAKD,MAAO,CAAE8C,SAAU,WAAYC,MAAO,OAAQC,OAAQ,SAGzD/C,wBAAC,EAAmB,KAAKgD,IAKxB/B,EAAM2B,SACL5C,8CACe,4CACbD,MAAO,CACL8C,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRE,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAGbpC,EAAM2B,UAEP,O,SCxCYU,EAAY,G,IAClC/C,EAAA,EAAAA,SACAgD,EAAA,EAAAA,cACAC,EAAA,EAAAA,UACAC,EAAA,EAAAA,SACAC,EAAA,EAAAA,UACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,uBACAC,EAAA,EAAAA,WACAC,EAAA,EAAAA,gBAYMC,EAAgC,MAAZxD,OAAmByD,EAAY,UAAUzD,EAAQ,QACrE0D,EAAsC,MAAZ1D,OAAmByD,EAAY,gBAE/D,MAAO,CACL/B,KAAM,GACNM,KAAM2B,EAAsB,CAC1BC,OAAQT,EACRH,cAAeA,EACfa,UAAWL,EACXM,gBAAiBJ,EACjBK,WAAYX,EACZY,mBAA8C,MAA1BX,OAAiCI,EAAeJ,EAAsB,MAE5FtB,MAAO4B,EAAsB,CAC3BC,OAAQN,EACRN,cAAeA,EACfa,UAAWL,EACXM,gBAAiBJ,IAEnBlC,KAAMmC,EAAsB,CAC1BM,KAAMhB,EACNiB,SAAUhB,IAEZvC,WAAYgD,EAAsB,CAChCM,KAAMV,KAKZ,SAASI,EAAsBQ,GAM7B,OALAzE,OAAO0E,KAAKD,GAAKE,SAAQ,SAACC,GACR,MAAZH,EAAIG,WACCH,EAAIG,MAGRH,E,oCC3CHI,E,4MACJC,MAAQ,CACNC,YAAY,G,kEAQZhE,KAAKiE,SAAS,CACZD,YAAY,M,+BAIN,IAAD,OACP,OACE,kBAAC,IAAD,CACEE,MAAO,iBAAO,CACZ5D,MAAO,EAAKL,MAAMkE,aAEpBC,OAAQ,iBAAO,CACb9D,MAAO,CAAC,EAAKyD,MAAMC,WAAa,EAAK/D,MAAMoE,SAAW,EAAKpE,MAAMkE,YACjEG,OAAQ,CACNC,SAAgC,IAAtB,EAAKtE,MAAMsE,SACrBC,KAAM,EAAKvE,MAAMwE,oBAIpB,gBAAGnE,EAAH,EAAGA,MAAH,OAAe,EAAKL,MAAM2B,SAAStB,U,GA7BLoE,IAAMC,WAAvCb,EAKGpC,aAAe,CACpByC,WAAY,GA6BDL,QCtCTc,E,4MAKJb,MAAQ,CACNc,YAAa,G,kEAGM,IAAD,OAClBC,aAAY,WACV,EAAKb,SAAS,CACZY,aAAc,EAAKd,MAAMc,YAAc,GAAK,EAAK5E,MAAM8E,OAAOC,WAE/DhF,KAAKC,MAAMgF,Y,+BAId,OAAOjF,KAAKC,MAAM2B,SAAS5B,KAAKC,MAAM8E,OAAO/E,KAAK+D,MAAMc,kB,GAlBrBH,IAAMC,WAAvCC,EACGlD,aAAe,CACpBuD,SAAU,KAoBCL,QCtBTM,E,4MACJC,aAA8BnC,E,EAE9Be,MAAQ,CACNzD,MAAO,EAAKL,MAAMkE,Y,kEAOC,IAAD,OAClBnE,KAAKmF,QAAUC,OAAOC,YAAW,WAC/B,EAAKpB,SAAS,CACZ3D,MAAO,EAAKL,MAAMoE,aAEnB,K,6CAIHe,OAAOE,aAAatF,KAAKmF,W,+BAIzB,OAAOnF,KAAKC,MAAM2B,SAAS5B,KAAK+D,MAAMzD,W,GAxBXoE,IAAMC,WAA/BO,EAOGxD,aAAe,CACpByC,WAAY,GAoBDe,QCvBTK,EAAkE,SAACtF,GAAD,OACtE,wCAAMvB,UAAW8G,IAAW,0BAA2BvF,EAAMvB,YAAgBuB,KAGzEwF,EAAqE,SAAC,GAAD,IACzEC,EADyE,EACzEA,YACA9D,EAFyE,EAEzEA,SAFyE,OAIzE,yBAAKlD,UAAU,iCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uCAAuCkD,IAExD,uBAAGlD,UAAU,oBAAoBgH,KAwPtBC,MApPf,WAAiB,IAAD,EACgCjB,IAAMkB,UAAS,GAD/C,mBACPC,EADO,KACUC,EADV,KAGd,OACE,yBAAKpH,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,QAAd,8BACA,yEAKN,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,uCACb,kBAAC,EAAD,CAA0BqG,OAAQ,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,OACnD,SAACzE,GAAD,OACC,kBAAC,EAAD,CACEA,MAAOA,EACPS,KAAI,UAAKT,EAAL,KACJQ,OAAQwB,EAAY,CAClBC,cAAe,gBAQ3B,6BACA,yBAAK7D,UAAU,YACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,eAAd,8CAGF,kBAAC,EAAD,CACEgH,YACE,2CACY,kBAAC,EAAD,mBADZ,KACqC,kBAAC,EAAD,qBADrC,QACoE,IAClE,kBAAC,EAAD,wBAFF,qBAMF,kBAAC,EAAD,CAA0BX,OAAQ,CAAC,GAAI,OACpC,SAACzE,GAAD,OACC,kBAAC,EAAD,CACEA,MAAOA,EACP5B,UAAqB,MAAV4B,EAAgB,WAAa,aACxCS,KAAM,UAAmBT,EAAT,MAAVA,EAAA,kBAMd,kBAAC,EAAD,CACEoF,YACE,2CACY,kBAAC,EAAD,0BADZ,wCACgF,IAC9E,kBAAC,EAAD,+BAFF,MAMF,kBAAC,EAAD,CAA0BX,OAAQ,CAAC,GAAI,MACpC,SAACzE,GAAD,OACC,kBAAC,EAAD,CACEA,MAAOA,EACPS,KAAI,UAAKT,EAAL,KACJxB,YAAa,EACbH,kBAAgB,EAChBmC,OAAQwB,EAAY,CAClBI,UAAU,sBAAD,QAAyB,IAAMpC,GAAS,IAAxC,KACTsC,uBAAwB,WAOlC,kBAAC,EAAD,CACE8C,YACE,qCACM,kBAAC,EAAD,yBADN,mCAKF,kBAAC,EAAD,CACEhH,UAAU,+BACVwB,YAAU,EACVC,kBAAmB,EACnBrB,YAAa,EACbwB,MAAO,GACPS,KAAI,UAAK,GAAL,KACJF,QAAS,CACPI,KAAM,sBACNK,MAAO,4BACPC,KAAM,2BACNR,KAAM,sDACNb,WAAY,kCAEdY,OAAQ,CACNZ,WAAY,CACVsD,KAAM,eAMd,kBAAC,EAAD,CACEkC,YACE,uEACwC,kBAAC,EAAD,oBADxC,kCAMF,kBAAC,EAAD,CACEvB,WAAY,EACZE,SAAU,GACVE,SAAU,IACVE,eAAgBsB,MAEf,SAACzF,GACA,IAAM0F,EAAevG,KAAKwG,MAAM3F,GAChC,OACE,kBAAC,EAAD,CACEA,MAAOA,EACPS,KAAI,UAAKiF,EAAL,KACJlF,OAAQwB,EAAY,CAAEK,eAAgB,eAOhD,kBAAC,EAAD,CACE+C,YACE,qEACsC,kBAAC,EAAD,0BADtC,uBAKF,kBAAC,EAAD,CAAkBvB,WAAY,GAAIE,SAAU,KACzC,SAAC/D,GAAD,OACC,kBAAC,EAAD,CACEA,MAAOA,EACPS,KAAI,UAAKT,EAAL,KACJM,YAAa,IACbE,OAAQwB,EAAY,CAClB/C,SAAU,KACVgD,cAAe,OACfG,UAAW,SACXG,WAAY,eAOtB,kBAAC,EAAD,CACE6C,YACE,0DAC2B,kBAAC,EAAD,wCAD3B,qCAMF,kBAAC/D,EAAD,CAAiCrB,MAAO,IACtC,yBACEvB,MAAO,CAAE+C,MAAO,GAAIG,WAAY,GAChCiE,IAAI,kCACJC,IAAI,SAEN,yBAAKpH,MAAO,CAAE0E,SAAU,GAAIxB,WAAY,IACtC,uCADF,WAMH4D,EACC,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,CACEV,YACE,8BACE,kBAAC,EAAD,oBADF,OAEE,kBAAC,EAAD,yBAFF,OAGE,kBAAC,EAAD,qBAIJ,kBAAC,EAAD,CACEpF,MAAO,GACPM,YAAa,GACbjC,kBAAgB,EAChBuB,YAAU,EACVC,kBAAmB,EACnBW,OAAQ,CACNQ,MAAO,CACL6B,OAAQ,aAOlB,yBAAKzE,UAAU,sBACb,4BACEA,UAAU,8BACV2H,QAAS,kBAAMP,GAAmB,KAElC,8CAKN,yBAAKpH,UAAU,2BACb,uBAAGA,UAAU,uBAAuB4H,KA1Ob,uCA0OvB,sCAMJ,wBAAI5H,UAAU,SACd,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,gBACA,yBAAKA,UAAU,oBACb,wDACA,uBAAGA,UAAU,QACX,kBAAC,EAAD,6CAEF,uBAAGA,UAAU,sBAAsB4H,KAzP1B,0DAyPT,wBAIF,yBAAK5H,UAAU,eACb,yBAAKA,UAAU,QAAf,YACW,uBAAG4H,KAAK,4BAAR,kBC5PNC,G,mLARX,OACE,6BACE,kBAAC,EAAD,W,GAJU5B,cCKE6B,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASjG,OAAO,kBAAC,EAAD,MAASkG,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b354543.chunk.js","sourcesContent":["import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import * as React from 'react';\n\nimport CircularProgressbar from './CircularProgressbar';\nimport { CircularProgressbarWrapperProps } from './types';\n\ntype CircularProgressbarWithChildrenProps = CircularProgressbarWrapperProps & {\n  children?: React.ReactNode;\n};\n\n// This is a wrapper around CircularProgressbar that allows passing children,\n// which will be vertically and horizontally centered inside the progressbar automatically.\nfunction CircularProgressbarWithChildren(props: CircularProgressbarWithChildrenProps) {\n  const { children, ...circularProgressbarProps } = props;\n\n  return (\n    <div data-test-id=\"CircularProgressbarWithChildren\">\n      {/* Has an extra div wrapper because otherwise, adding content after\n      this progressbar is spaced weirdly. */}\n      <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n        {/* Progressbar is not positioned absolutely, so that it can establish\n      intrinsic size for props.children's content. */}\n        <CircularProgressbar {...circularProgressbarProps} />\n\n        {/* Children are positioned absolutely, and height adapts to the\n      progressbar's intrinsic size. It appears below the progressbar,\n      but negative margin moves it back up. */}\n        {props.children ? (\n          <div\n            data-test-id=\"CircularProgressbarWithChildren__children\"\n            style={{\n              position: 'absolute',\n              width: '100%',\n              height: '100%',\n              marginTop: '-100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {props.children}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default CircularProgressbarWithChildren;\n","import { CircularProgressbarStyles } from './types';\n\nexport default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor,\n}: {\n  rotation?: number; // Number of turns, 0-1\n  strokeLinecap?: any;\n  textColor?: string;\n  textSize?: string | number;\n  pathColor?: string;\n  pathTransition?: string;\n  pathTransitionDuration?: number; // Measured in seconds\n  trailColor?: string;\n  backgroundColor?: string;\n}): CircularProgressbarStyles {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`;\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center';\n\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`,\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize,\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor,\n    }),\n  };\n}\n\nfunction removeUndefinedValues(obj: { [key: string]: any }) {\n  Object.keys(obj).forEach((key: string) => {\n    if (obj[key] == null) {\n      delete obj[key];\n    }\n  });\n  return obj;\n}\n","import React from 'react';\nimport { Animate } from 'react-move';\n\ntype Props = {\n  duration: number;\n  easingFunction: Function;\n  valueStart: number;\n  valueEnd: number;\n  children: (value: number) => React.ReactElement;\n};\n\ntype State = {\n  isAnimated: boolean;\n};\n\nclass AnimatedProgressProvider extends React.Component<Props, State> {\n  state = {\n    isAnimated: false,\n  };\n\n  static defaultProps = {\n    valueStart: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      isAnimated: true,\n    });\n  }\n\n  render() {\n    return (\n      <Animate\n        start={() => ({\n          value: this.props.valueStart,\n        })}\n        update={() => ({\n          value: [this.state.isAnimated ? this.props.valueEnd : this.props.valueStart],\n          timing: {\n            duration: this.props.duration * 1000,\n            ease: this.props.easingFunction,\n          },\n        })}\n      >\n        {({ value }) => this.props.children(value)}\n      </Animate>\n    );\n  }\n}\n\nexport default AnimatedProgressProvider;\n","import React from 'react';\n\ntype Props = {\n  values: number[];\n  interval: number;\n  children: (value: number) => React.ReactNode;\n};\n\ntype State = {\n  valuesIndex: number;\n};\n\nclass ChangingProgressProvider extends React.Component<Props, State> {\n  static defaultProps = {\n    interval: 1000,\n  };\n\n  state = {\n    valuesIndex: 0,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        valuesIndex: (this.state.valuesIndex + 1) % this.props.values.length,\n      });\n    }, this.props.interval);\n  }\n\n  render() {\n    return this.props.children(this.props.values[this.state.valuesIndex]);\n  }\n}\n\nexport default ChangingProgressProvider;\n","import React from 'react';\n\ntype Props = {\n  valueStart: number;\n  valueEnd: number;\n  children: (value: number) => React.ReactNode;\n};\n\ntype State = {\n  value: number;\n};\n\nclass ProgressProvider extends React.Component<Props, State> {\n  timeout: number | undefined = undefined;\n\n  state = {\n    value: this.props.valueStart,\n  };\n\n  static defaultProps = {\n    valueStart: 0,\n  };\n\n  componentDidMount() {\n    this.timeout = window.setTimeout(() => {\n      this.setState({\n        value: this.props.valueEnd,\n      });\n    }, 0);\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  render() {\n    return this.props.children(this.state.value);\n  }\n}\n\nexport default ProgressProvider;\n","import React from 'react';\nimport {\n  CircularProgressbar,\n  CircularProgressbarWithChildren,\n  buildStyles,\n} from 'react-circular-progressbar';\nimport classNames from 'classnames';\nimport { easeQuadInOut } from 'd3-ease';\n\n// Custom progressbar wrappers\nimport AnimatedProgressProvider from './AnimatedProgressProvider';\nimport ChangingProgressProvider from './ChangingProgressProvider';\nimport ProgressProvider from './ProgressProvider';\n\nconst GITHUB_URL = 'https://github.com/kevinsqi/react-circular-progressbar';\nconst CODESANDBOX_EXAMPLES_URL = 'https://codesandbox.io/s/vymm4oln6y';\n\nconst Code: React.FunctionComponent<React.HTMLProps<HTMLSpanElement>> = (props) => (\n  <code className={classNames('p-1 bg-yellow text-dark', props.className)} {...props} />\n);\n\nconst Example: React.FunctionComponent<{ description: React.ReactNode }> = ({\n  description,\n  children,\n}) => (\n  <div className=\"col-12 col-sm-6 col-md-4 mt-5\">\n    <div className=\"row\">\n      <div className=\"col-6 col-md-4 offset-3 offset-md-4\">{children}</div>\n    </div>\n    <p className=\"text-center mt-3\">{description}</p>\n  </div>\n);\n\nfunction Demo() {\n  const [showAllExamples, setShowAllExamples] = React.useState(false);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row mt-5\">\n        <div className=\"col-12\">\n          <div className=\"text-center\">\n            <h1 className=\"mb-3\">react-circular-progressbar</h1>\n            <p>A circular progress indicator component</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row mt-5 mb-5\">\n        <div className=\"col-6 offset-3 col-md-2 offset-md-5\">\n          <ChangingProgressProvider values={[0, 20, 40, 60, 80, 100]}>\n            {(value) => (\n              <CircularProgressbar\n                value={value}\n                text={`${value}%`}\n                styles={buildStyles({\n                  strokeLinecap: 'butt',\n                })}\n              />\n            )}\n          </ChangingProgressProvider>\n        </div>\n      </div>\n\n      <hr />\n      <div className=\"row mt-5\">\n        <div className=\"col-12\">\n          <h2 className=\"text-center\">Built with SVG and styled with plain CSS.</h2>\n        </div>\n\n        <Example\n          description={\n            <span>\n              Customize <Code>props.text</Code>, <Code>props.styles</Code>, and{' '}\n              <Code>props.className</Code> based on value.\n            </span>\n          }\n        >\n          <ChangingProgressProvider values={[75, 100]}>\n            {(value) => (\n              <CircularProgressbar\n                value={value}\n                className={value === 100 ? 'complete' : 'incomplete'}\n                text={value === 100 ? `${value}!!` : `${value}...`}\n              />\n            )}\n          </ChangingProgressProvider>\n        </Example>\n\n        <Example\n          description={\n            <span>\n              Customize <Code>props.strokeWidth</Code> and make it go counterclockwise with{' '}\n              <Code>props.counterClockwise</Code>.\n            </span>\n          }\n        >\n          <ChangingProgressProvider values={[20, 80]}>\n            {(value) => (\n              <CircularProgressbar\n                value={value}\n                text={`${value}%`}\n                strokeWidth={5}\n                counterClockwise\n                styles={buildStyles({\n                  pathColor: `rgba(62, 152, 199, ${(100 + value) / 200})`,\n                  pathTransitionDuration: 0.2,\n                })}\n              />\n            )}\n          </ChangingProgressProvider>\n        </Example>\n\n        <Example\n          description={\n            <span>\n              Use <Code>props.background</Code> to give it an inverted style.\n            </span>\n          }\n        >\n          <CircularProgressbar\n            className=\"CircularProgressbar-inverted\"\n            background\n            backgroundPadding={5}\n            strokeWidth={6}\n            value={66}\n            text={`${66}%`}\n            classes={{\n              root: 'CircularProgressbar',\n              trail: 'CircularProgressbar-trail',\n              path: 'CircularProgressbar-path',\n              text: 'CircularProgressbar-text some-additional-test-class',\n              background: 'CircularProgressbar-background',\n            }}\n            styles={{\n              background: {\n                fill: '#3e98c7',\n              },\n            }}\n          />\n        </Example>\n\n        <Example\n          description={\n            <span>\n              Use a library like react-move to ease <Code>props.value</Code> if you want to animate\n              text.\n            </span>\n          }\n        >\n          <AnimatedProgressProvider\n            valueStart={5}\n            valueEnd={66}\n            duration={1.4}\n            easingFunction={easeQuadInOut}\n          >\n            {(value) => {\n              const roundedValue = Math.round(value);\n              return (\n                <CircularProgressbar\n                  value={value}\n                  text={`${roundedValue}%`}\n                  styles={buildStyles({ pathTransition: 'none' })}\n                />\n              );\n            }}\n          </AnimatedProgressProvider>\n        </Example>\n\n        <Example\n          description={\n            <span>\n              Want that car speedometer look? Use <Code>props.circleRatio</Code> and CSS rotation.\n            </span>\n          }\n        >\n          <ProgressProvider valueStart={10} valueEnd={66}>\n            {(value) => (\n              <CircularProgressbar\n                value={value}\n                text={`${value}%`}\n                circleRatio={0.75}\n                styles={buildStyles({\n                  rotation: 1 / 2 + 1 / 8,\n                  strokeLinecap: 'butt',\n                  pathColor: 'orange',\n                  trailColor: '#eee',\n                })}\n              />\n            )}\n          </ProgressProvider>\n        </Example>\n\n        <Example\n          description={\n            <span>\n              Need custom content? Use <Code>CircularProgressbarWithChildren</Code> to add arbitrary\n              centered HTML.\n            </span>\n          }\n        >\n          <CircularProgressbarWithChildren value={66}>\n            <img\n              style={{ width: 40, marginTop: -5 }}\n              src=\"https://i.imgur.com/b9NyUGm.png\"\n              alt=\"doge\"\n            />\n            <div style={{ fontSize: 12, marginTop: -5 }}>\n              <strong>66%</strong> mate\n            </div>\n          </CircularProgressbarWithChildren>\n        </Example>\n\n        {showAllExamples ? (\n          <React.Fragment>\n            <Example\n              description={\n                <span>\n                  <Code>circleRatio</Code>&nbsp;\n                  <Code>counterClockwise</Code>&nbsp;\n                  <Code>background</Code>\n                </span>\n              }\n            >\n              <CircularProgressbar\n                value={50}\n                circleRatio={0.7}\n                counterClockwise\n                background\n                backgroundPadding={4}\n                styles={{\n                  trail: {\n                    stroke: '#fff',\n                  },\n                }}\n              />\n            </Example>\n          </React.Fragment>\n        ) : (\n          <div className=\"col-12 text-center\">\n            <button\n              className=\"btn btn-link text-secondary\"\n              onClick={() => setShowAllExamples(true)}\n            >\n              <small>Show more</small>\n            </button>\n          </div>\n        )}\n\n        <div className=\"col-12 text-center mt-3\">\n          <a className=\"btn btn-outline-info\" href={CODESANDBOX_EXAMPLES_URL}>\n            See more examples on CodeSandbox\n          </a>\n        </div>\n      </div>\n\n      <hr className=\"mt-5\" />\n      <div className=\"mt-5 mb-5\">\n        <h2 className=\"text-center\">Installation</h2>\n        <div className=\"text-center mt-5\">\n          <p>Install with yarn or npm:</p>\n          <p className=\"mb-5\">\n            <Code>yarn add react-circular-progressbar</Code>\n          </p>\n          <a className=\"btn btn-info btn-lg\" href={GITHUB_URL}>\n            View docs on Github\n          </a>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"mt-5\">\n            Built by <a href=\"https://www.kevinqi.com/\">@kevinsqi</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Demo;\n","import React, { Component } from 'react';\nimport Demo from './Demo';\n\n// Stylesheets\nimport 'react-circular-progressbar/dist/styles.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Demo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}